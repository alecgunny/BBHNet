name: container-build 
on: push
env:
  REGISTRY: ghcr.io

jobs:
  build:
    runs-on: ubuntu-latest
    container:
        image: quay.io/singularity/singularity:v3.8.1
        options: --privileged

    steps:
    -
      name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - 
      name: Build Container
      # run: |
      #   cd aframe/train
      #   singularity build train.sif train.def
      run: singularity build dummy.sif dummy.def

    # - 
    #   name: Login and Deploy Container
    #   run: |
    #     echo ${{ secrets.GITHUB_TOKEN }} | singularity remote login -u ${{ github.actor }} --password-stdin oras://${{ env.REGISTRY }}
    #     singularity push dummy.sif oras://${{ env.REGISTRY }}/${{ github.repository }}:latest
    -
      name: Dump container contents
      run: |
        singularity sif dump 4 dummy.sif > dummy.squash
    - name: upload artifact
      uses: actions/upload-artifact@master
      with:
        name: dummy
        path: dummy.squash
  # push:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     packages: write
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  
    - name: Log in to the Container registry
      uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    # - 
    #   name: download squash
    #   uses: actions/download-artifact@master
    #   with:
    #     name: dummy
    #     path: dummy.squash
    # - 
    #   name: delete artifact
    #   uses: geekyeggo/delete-artifact@v2
    #   with:
    #     name: dummy

    - 
      name: build docker image
      env:
        tag: ${{ env.REGISTRY }}/${{ github.repository }}/dummy:latest
      run: |
        unsquashfs -f -d dummy dummy.squash
        printf 'FROM scratch\nCOPY dummy /\nENV PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nCMD ["/bin/bash"]' | \
          docker build -t ${{ env.tag }} -
        docker push ${{env.tag }}
  
